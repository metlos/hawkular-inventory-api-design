FORMAT: 1A

# Hawkular Inventory API
This is a draft of the REST API of inventory in Hawkular.

Nomenclature:

* _Feed_ - source of data that sends data to the REST API defined here. The
feed is assumed to have a number of implicit capabilities:
  * _identity_ - the feed is able to remember its identity throughout the
  restarts.
* _Capabilities_ - the feeds can support different additional functionality.
Currently, the additional capabilities are the following (list is incomplete
and evolving):
  * _metadata_ - the feed is able to define the metadata about the data it
  sends
  * _monitoring_ - the feed sends monitoring data
  * _configuration_ - the feed is able to send and receive configuration
  * _execution_ - the feed is able to execute operations on request
  * _scheduling_ - the feed is able to schedule its actions (montoring data
  gathering, applying configuration, operation execution, ...)
  * _discovery_ - the feed can scan for new stuff to report on. This is
  somewhat implicit, but feeds declaring this capability can do so on
  demand.

It is assumed that the connections between the feeds and the REST endpoint
is always initiated by the feeds. If the feed wants to support receiving of
commands, it needs to keep the connection open. It is yet to be defined what
kind of connection the feeds will have to use (HTTP, WebSockets?).

Authentification is not dealt with in this draft but it is assumed it would
be handled externally/transparently to the API through Keycloak or other SSO
provider. Authorization is also not dealt with.

# Group Feed

All things about feeds themselves - CRUD, registration, data types, data push.

## Feed [/feeds/{id}]

Information about and manipulation of a single feed.

+ Model (application/json)

        {
            "id" : "UUID1",
            "capabilities" : ["monitoring", "configuration", "execution",
              "scheduling", "discovery"]
        }

+ Parameters

    + id (required, string) ... the assigned ID of the feed.

### Get a single feed [GET]

+ Response 200

    [Feed][]

### Delete the feed from Hawkular along with everything it defines [DELETE]
+ Response 204

## Feeds [/feeds]
Feed registration, etc.

### Registration [POST]
This is where the feeds register themselves.

+ Request (application/json)

        {
            "id" : "suggested-unique-id", //this might or might not be 
                                          //accepted by the rhq server
            "capabilities" : ["monitoring", "configuration", "execution",
              "scheduling", "discovery"]
        }

+ Response 201

    [Feed][]

+ Request (application/json)

        {
            "id" : "suggested-unique-id", //this might or might not be 
                                          //accepted by the rhq server
            "capabilities" : ["metadata", "monitoring", "configuration",
                "execution", "scheduling", "discovery"]
        }

+ Response  202 (application/hal+json)
The feed claims to support metadata. The registration therefore continues
with registering the resource types the feed knows about.
The server will not accept any data until the resource types are
registered.

    + Headers
    
            Link: <../types/register?feed=UUID2>;rel="next" 

    + Body
    
            {
                "id" : "UUID2",
                "capabilities" : ["metadata", "monitoring",
                "configuration", "execution", "scheduling", "discovery"]
            }        

### Feed Collection [GET]
Returns all feeds that rhq knows of.

+ Response 200 (application/json)

        [
            { 
                "id" : "UUID1",
                "capabilities" : ["monitoring", "configuration", "execution",
                  "scheduling", "discovery"]
            },
            { 
                "id" : "UUID2",
                "capabilities" : ["metadata", "monitoring", "configuration",
                    "execution", "scheduling", "discovery"]
            }
        ]

## Type [/feeds/types/{id}?cascade]
Work with resource and data types.

+ Model (application/json)
    
        {
            "id" : "UUID/Cpu/1.0",
            "metrics" : [
                {
                    "name" : "systemload",
                    "unit" : "percent",
                    "type" : "numeric"
                }
            ],
            "connection" : {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type" : "object",
                "properties" : [
                    "id" : {
                        "type" : "integer"
                    }
                ],
                "required" : ["id"]
            }
        }

+ Parameters
    
    + id (string) ... the ID of the resource type (url encoded).
    + cascade (boolean, optional) ... applicable to the DELETE method. If true, all users
        of the resource type will be deleted with it. This is quite dangerous given that
        also other resource types might reference this one.
    
### Get a single type [GET]

+ Response 200
    
    [Type][]

### Delete a single type [DELETE]
Response either with a 204 Deleted HTTP status code or with 409 Conflict HTTP status code
referencing the resources and other entities that are linked to the type in question.

+ Response 204

+ Response 409 (application/halj+son)
    + Headers
    
            Link: <../../types/asdf>;rel="derivedType", <../../resources/asdf>;rel="instance"
    
    + Body
    
            {
                "error" : "Cannot delete resource type that is being used by other entities."
            }
        
