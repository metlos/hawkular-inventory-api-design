FORMAT: 1A

# Hawkular Inventory API
This is a draft of the REST API of inventory in Hawkular.

The design doc from which this page is generated is
[here](https://github.com/metlos/hawkular-inventory-api-design/blob/master/apiary.apib).

Please note that there is a lot of detail in the examples below each REST
endpoint (click on the two down-arrows next to the "Add Comment" link).

----

**Nomenclature**

* _Feed_ - source of data that sends data to the REST API defined here. The
feed is assumed to have a number of implicit capabilities:
  * _identity_ - the feed is able to remember its identity throughout the
  restarts.
* _Capabilities_ - the feeds can support different additional functionality.
Currently, the additional capabilities are the following (list is incomplete
and evolving):
  * _metadata_ - the feed is able to define the metadata about the data it
    sends
  * _monitoring_ - the feed sends monitoring data
  * _configuration_ - the feed is able to send and receive configuration
  * _execution_ - the feed is able to execute operations on request
  * _scheduling_ - the feed is able to schedule its actions (montoring data
    gathering, applying configuration, operation execution, ...)
  * _ignore_ - resource ignoring. By default the feeds are supposed to
    report everything they know about all the time. This is the lowest
    common denominator in terms of functionality. Feeds supporting _ignore_
    can get instructions from the endpoint about what data they don't need
    to report on to save on the resources the feeds consume on their
    machines.
  * _type-digest_ - instead of sending the whole resource/data type
    definition to the endpoint, the feed can compute the digest of the type
    according to the defined algorithm. Such digest can then be used to
    reduce the amount of traffic.

It is assumed that the connections between the feeds and the REST endpoint
is always initiated by the feeds. If the feed wants to support receiving of
commands, it needs to keep the connection open. It is yet to be defined what
kind of connection the feeds will have to use (HTTP, WebSockets?).

Authentification is not dealt with in this draft but it is assumed it would
be handled externally/transparently to the API through Keycloak or other SSO
provider. Authorization is also not dealt with.

The API is split into 2 parts:
* _/inflow/..._ - which is used solely by the feeds for data reporting
* _/..._ - all other endpoints are meant for user consumption

The two parts of the API are authenticated separately, possibly even using
different authentication mechanisms.

----

_**Stories**_

Actors in the stories below: **F** the feed, **M** hawkular metrics, **I**
hawkular inventory, **B** hawkular bus, **U** the user (human or scripted).

**Dumb Feed**
From the user point of view, the simplest approach. The "dumb feed" is
a thing reporting monitoring data using just name value pairs. It doesn't
provide any metadata. Also a number of "dumb feeds" on different machines
might report using the same names, making the reporting possibly ambiguous
without any further post processing.

1. **F**: I send my first name=value pair to `POST /metrics`.
1. **M**: oh, a new metric, stores it, sends notification to bus.
1. **B**: To whom it may concern, a new metric called "name" has been
          reported.
1. **I**: Oh cool, let me put it in the discovery queue, I don't know a
          thing about this guy.
1. **U**: Oh yeah, my dumb feed. "name" is actually reported in KiBs
          (`PUT /metrics/name/meta`) and I want it to appear under
          my "hot stuff" resource (`PUT /inventory/resources/hot%A20stuff)

**Monitoring Feed**

**Configuration Feed**

**Interacting Feed**

----

**Identifiers**

We have agreed that feeds need to be able to remember their assigned
identity. Thus, the identity of the feed is a random UUID generated on the
"server side".

Because usually there are several deployment evironments (development,
staging, production) and because Hawkular will support multitenancy, the
feed ID is actually more complex than a simple UUID. To support easy
migration between environments, the full feed ID has the form of:
```
ENVIRONMENT_ID/FEED_UUID
```

and all IDs are always per-tenant. Thus to migrate feeds between
environments all that is required is to reconfigure them to use a different
environment id. The feed in the old environment can retain its FEED_UUID but
because the environment id will differ between the old and new environment
the two feeds will be distinguishable.

The data and resource types have more complex IDs. The structure is as
follows:

Resource types:
```
<origin>://tenant-id/[<feed-id>/]<name>/<version>
```

Data types:
```
<origin>://tenant-id/[<feed-id>/][/<resourceType>/<version>]/<data-kind>/<name>
```

where

* stuff in [ and ] is optional.
* _origin_ - is either `feed` or `hawkular`. The `feed` origin signifies
that the ID is assigned by the feeds themselves and are "local" to each
individual feed. The `hakwular` origin means that the ID is assigned by the
server and is globally unique amongst all the feeds.
* _tenant-id_ - the id of the tenant
* _feed-id_ - the environment + feed uuid
* _name_ - the name of the entity
* _version_ - the version of the resource type as understood by the feed
* _data-kind_ - the kind of the data. One of `metric`, `operation`, 
`configuration`, `connection`.

The URIs with the `hawkular` origin will not have the `feed-id` part because
the entities are global. The URIs with the `feed` origin have to specify
the `feed-id` because they are local to the feeds.

# Group Inflow
This is the endpoint through which the data enters the Hawkular system.
This is solely used by feeds and exposes mostly "append-only" interface.
There is not much in the sense of delete operations because feeds don't
usually need any such functionality.

The rest of the API, which is user oriented, offers more traditional CRUD
capabilities but functionally doesn't overlap with the _inflow_
functionality. This is intentional and offers clear separation between data
producers and data users.

## Feeds [/{tenant-id}/{environment-id}/inflow/feeds]
Feed registration

+ Parameters
    + tenant-id (string) ... the id of the tenant
    + environment-id (string) ... the id of the environment
    
+ Model (application/json)

        {
            "id" : "TENANT_ID1/ENV_ID1/FEED_UUID1",
            "capabilities" : ["monitoring", "configuration", "execution",
              "scheduling", "discovery"]
        }

### Registration [POST]
This is where the feeds register themselves.

New feeds receive their ID from the endpoint and are required to remember it
persistently.

The feeds are supposed to know what tenant (e.g. `acme.org`, `redhat.com`)
and environment (e.g. `dev`, `staging`, `production`) they are in though. If
a feed doesn't know such information it will have to be placed behind a
proxy feed that will supply such information on its behalf.

The default tenant ID is `0` for installations with only a single tenant.
The same goes for enviroment ID. The default is `0` for installations with
only a single enviroment.

If the feed claims to support metadata, the registration continues
with registering the resource and data types the feed knows about (the
202 HTTP response status + Link header).

The server will not import any data into the inventory until it also knows
its resource types.

+ Request (application/json)

        {
            "tenant" : "TENANT_ID1",
            "environment" : "ENV_ID1",
            "capabilities" : ["monitoring", "configuration", "execution",
              "scheduling", "discovery"]
        }

+ Response 201

    [Feed][]

+ Request (application/json)

        {
            "tenant" : "TENANT_ID1",
            "environment" : "ENV_ID1",
            "capabilities" : ["metadata", "monitoring", "configuration",
                "execution", "scheduling", "discovery"]
        }

+ Response  202 (application/hal+json)

    + Headers
    
            Link: <../types?feed=TENANT_ID1/ENV_ID1/FEED_UUID2>;rel="next" 

    + Body
    
            {
                "id" : "TENANT_ID1/ENV_ID1/FEED_UUID2",
                "capabilities" : ["metadata", "monitoring",
                "configuration", "execution", "scheduling", "discovery"]
            }        

## Types [/{tenant-id}/{environment-id}/inflow/types?feed]
Data and resource type registration.

+ Parameters

    + tenant-id (string) ... the id of the tenant
    + environment-id (string) ... the id of the environment
    + feed (string) ... the ID of the feed that is registering the type
   
### Registration of a feed-local type [POST]

If the registration of the resource or data type succeeds, the endpoint
responds with a simple HTTP status code `204`.

If the endpoint detects that there is already type with the same name but
different structure, it will respond with the conflict HTTP status `409`.
In such case the feed is supposed to use the type udate endpoint to move
the type forward to a new version.

If the feed doesn't want to supply a resource type and its version, it can
use the default `0` for both.

+ Request (application/json)

        {
            "id" : "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/0/0/metric/FunnyNumber",
            "type" : "numeric",
            "unit" : "percentage"
        }

+ Response 204

+ Request (application/json)

        {
            "id" : "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/MyApp/1.0",
            "metrics" : [
                "load" : {
                    "type" : "numeric",
                    "unit" : "percentage"
                }
            ]
        }

+ Response 204

+ Response 409

    + Header
        
            Link: <update?feed=TENANT_ID1/ENV_ID1/FEED_UUID1>;rel="update"

### Registration of a global type [POST]
`204` is used to report successful match.

The `404` status code is returned in the case when the feed advertises to
use a global resource type but the endpoint doesn't know such type.

The feed needs to register the global type to ensure that the server does
know about it. This is different from the feed-originating types where the
type does not need to be known to the server upfront.

+ Request (application/json)

        {
            "id" : "hawkular://TENANT_ID/Cpu/1.0"
        }
        
+ Response 204

+ Response 404

## Data [/{tenant-id}/{environment-id}/inflow/data?feed]

+ Parameters

    + tenant-id (string) ... the id of the tenant
    + environment-id (string) ... the id of the environment
    + feed (string) ... the ID of the feed sending the data
   
### Resource details [POST]
There is quite little that the feed can report on the resource itself.

By default only three "special" attributes are supported: `name`, `type` and
`relationships`.

The name is supposed to be the default human readable name of the resource.

The type is the type of the resource as understood by the feed. This is
mandatory even for feeds that otherwise don't support resource types. Such
feeds need to supply the default resource type and version `0` (e.g.
`feed://TENANT_ID/ENV_ID/FEED_UUID/0/0`).

The relationships define what relationships to other resources the resource
in question has. In particular, one doesn't need to define the "parent"
of the resource because the ID of the parent can be deduced from the ID of
the resource itself by understanding it as a path.

Other attributes on the resource are allowed and merely "stored".

+ Request (application/json)
        
        [
            {
                "id" : "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/EAP1/app.war",
                "type" : "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/Eap/7.0/Webapp",
                "name" : "Acme App",
                "version" : "1.0.1",
                "relationships" : {
                    "uses" : [
                        "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/EAP1/Datasource1",
                        "..."
                    ]
                }
            }
        ]

+ Response 204

### Monitoring and other data [POST]

+ Request (application/json)

        [
            {
                "id" : "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/EAP1/app.war/metrics/pingTime",
                "type" : "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/Eap/7.0/Webapp/metrics/pingTime",
                "data" : [
                    {
                        "timestamp" : 123456789,
                        "value" : 15
                    },
                    {
                        "timestamp" : 123456799,
                        "value" : 16
                    }
                ]
            },
            {
                "id" : "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/EAP1/app.war/configuration",
                "type" : "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/Eap/7.0/Webapp/configuration",
                "data" : [
                    {
                        "timestamp" : 123456789,
                        "value" : {
                            "contextRoot" : "/app",
                            "..." : "..."
                        }
                    }
                ]
            }
        ]

+ Response 202

## Ignore list [/{tenant-id}/{environment-id}/inflow/ignore?feed]
Using this endpoint the feeds that support it can get information about
the resources or data points they should ignore and not collect data on
them.

The feeds are supposed to periodically check this URL to get the up-to-date
list of stuff to ignore.

+ Parameters

    + tenant-id (string) ... the id of the tenant
    + environment-id (string) ... the id of the environment
    + feed (string) ... the feed ID
    
### Ignore list [GET]

+ Response (application/json)

        [
            "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/Platform/Cpu/1",
            "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/MyApp/FunnyNumber"
        ]

# Group Feeds

All things about feeds themselves.

## Feed [/{tenant-id}/{environment-id}/feeds/{id}?at]

Information about and manipulation of a single feed.

+ Model (application/json)

        {
            "id" : "TENANT_ID1/ENV_ID1/FEED_UUID1",
            "capabilities" : ["monitoring", "configuration", "execution",
              "scheduling", "discovery"]
        }

+ Parameters

    + id (required, string) ... the assigned ID of the feed.
    + at (optional, timestamp) ... how did the feed look like at the
                                   specified time instant.

### Get a single feed [GET]

+ Response 200

    [Feed][]

### Delete the feed from Hawkular along with everything it defines [DELETE]
+ Response 204

## Feeds [/{tenant-id}/{environment-id}/feeds?at]

+ Parameters

    + tenant-id (string) ... the id of the tenant
    + environment-id (string) ... the id of the environment
    + at (timestamp, optional) ... what where the feeds at the specified
                                   time instant.

### Feed Collection [GET]
Returns all feeds that rhq knows of.

+ Response 200 (application/json)

        [
            { 
                "id" : "TENANT_ID1/ENV_ID1/FEED_UUID1",
                "capabilities" : ["monitoring", "configuration", "execution",
                  "scheduling", "discovery"]
            },
            { 
                "id" : "TENANT_ID1/ENV_ID1/FEED_UUID2",
                "capabilities" : ["metadata", "monitoring", "configuration",
                    "execution", "scheduling", "discovery"]
            }
        ]

# Group Types
Unlike in RHQ, types in Hawkular are a dynamic thing with full CRUD-ability.


## Type [/{tenant-id}/types/{id}?at&cascade]
Work with resource and data types. Note that types are tenant-wide, unlike
feeds that are environment-wide.

+ Parameters
    
    + tenant-id (string) ... the id of the tenant
    + id (string) ... the ID of the resource type (url encoded).
    + at (timestamp) ... only applicable for GET - returns the type as it
        looked like at the specified point in time.
    + cascade (boolean, optional) ... applicable to the DELETE method. If true, all users
        of the resource type will be deleted with it. This is quite dangerous given that
        also other resource types might reference this one.

+ Model (application/json)
    
        {
            "id" : "feed://TENANT_ID1/ENV_ID1/FEED_UUID/Cpu/1.0",
            "metrics" : [
                {
                    "name" : "systemload",
                    "unit" : "percent",
                    "type" : "numeric"
                }
            ],
            "connection" : {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type" : "object",
                "properties" : [
                    "id" : {
                        "type" : "integer"
                    }
                ],
                "required" : ["id"]
            }
        }

### Get a single type [GET]

+ Response 200
    
    [Type][]

+ Response 404

### Delete a single type [DELETE]
Response either with a 204 Deleted HTTP status code or with 409 Conflict HTTP status code
referencing the resources and other entities that are linked to the type in question.

+ Response 204

+ Response 409 (application/hal+json)
    + Headers
    
            Link: <../../types/asdf>;rel="derivedType", <../../resources/asdf>;rel="instance"
    
    + Body
    
            {
                "error" : "Cannot delete resource type that is being used by other entities."
            }
        

### Create a type [PUT]
Only types with the `hawkular` origin can be created.

A successful creation will be responded to by `204`.

A `409` conflict will be returned if the type already exists (in any
version). For updating an existing type (basically creating a new version
of it), one has to use a different type of request to this endpoint.

The distinction between resource type creation and resource type update is
important for keeping track of the evolution resource type. Because there
can be multiple versions active, the resource type versioning can basically
form a tree (consider the following progression of "releases": 1.0.0, 1.0.1,
1.1.0, 1.0.2, 1.1.1).

+ Request (application/json)

        {            
            "name" : "My Application",
            "extends" : "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/App/1.0",
            "parents" : [
                "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/Eap/7.0"
            ],
            "metrics" : [
                {
                    "name" : "ordersPerMinute",
                    "unit" : "none",
                    "type" : "numeric"
                },
                {
                    "name" : "cancellationsPerMinute",
                    "unit" : "none",
                    "type" : "numeric"
                },
                {
                    "name" : "funnyNumber",
                    "unit" : "KiB",
                    "type" : "numeric"
                }
            ]
        }

+ Response 204

+ Response 409

        {
            "error" : "Type already exists in version 1.0"
        }

### Modify Type [PUT]

+ Request (application/json)

        {
            "updates" : "hawkular://TENANT_ID1/MyApp/1.0",
            "version" : "1.1",
            "metrics" : {
                "remove" : [
                    "cancellationsPerMinute"
                ],
                "add" : [
                    {
                        "name" : "funnierNumber",
                        "unit" : "jiffies",
                        "type" : "numeric"
                    }
                ],
                "modify" : [
                    {
                        "name" : "funnyNumber",
                        "to" : {
                            "name" : "reallyFunnyNumber",
                            "unit" : "GiB",
                            "type" : "numeric"
                        }
                    }
                ]
            }
        }

+ Response 200 (application/hal+json)
    

    + Headers
    
            Link: <../MyApp/1.1>;rel="successor-version" 

    + Body

            {            
                "id" : "hawkular://TENANT_ID1/MyApp/1.1",
                "name" : "My Application",
                "version" : "1.1",
                "extends" : "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/App/1.0",
                "parents" : [
                    "feed://TENANT_ID1/ENV_ID1/FEED_UUID1/Eap/7.0"
                ],
                "metrics" : [
                    {
                        "name" : "ordersPerMinute",
                        "unit" : "none",
                        "type" : "numeric"
                    },
                    {
                        "name" : "reallyFunnyNumber",
                        "unit" : "GiB",
                        "type" : "numeric"
                    },
                    {
                        "name" : "funnierNumber",
                        "unit" : "jiffies",
                        "type" : "numeric"
                    }
                ]
            }

### Represent Type By Another [PUT]

+ Request (application/json)

        {
            "representBy" : "hawkular://TENANT_ID1/SomeApp/1.1"
        }

+ Response 200 (application/hal+json)

    + Headers
            
            Link : <../SomeApp/1.1>;rel="original"
            
    + Body
            {
                "id" : "hawkular://TENANT_ID1/MyApp/1.0",
                "representedBy" : "hawkular://TENANT_ID1/SomeApp/1.1"
            }

+ Response 409 (application/hal+json)

    + Headers
            
            Link : <../SomeApp/1.1>;rel="original"
            
    + Body
    
            {
                "error" : "types are incompatible"
            }

## Compare Types [/{tenant-id}/types/compare]

+ Parameters

    tenant-id (string) ... the id of the tenant
    
### Compare Types [POST]

+ Request (application/json)

        {
            "first" : "hawkular://TENANT_ID1/MyApp/1.0",
            "second" : "hawkular://TENANT_ID1/SomeApp/1.0"
        }

+ Response (application/json)

        {
            
            "name" : { 
                "first" : "My Application", 
                "second" : "Some Application"
            },
            "metrics" : {
                "first" : [
                    {
                        "name" : "funnyNumber",
                        "unit" : "KiB",
                        "type" : "numeric"
                    }
                ],
                "second" : [
                    {
                        "name" : "cancellationsPerMinute",
                        "unit" : "none",
                        "type" : "numeric"
                    }
                ],
                "difference" : [
                    {
                        "first" : {
                            "name" : "funnierNumber",
                            "unit" : "jiffies",
                            "type" : "numeric"
                        },
                        "second" : {
                            "name" : "funnierNumber",
                            "unit" : "kPa",
                            "type" : "numeric"
                        }
                    }
                ]
            }
        }

# Group Data

## Data Points

### Get Numeric Metrics [/{tenant-id}/metrics/numeric]

### Get Availability

## Resources

### Get Details

### Set Details

### Create Resource View

### Delete Resource View

### Update Resource View

### Get Relationships

### Update Relationships

# Group Query
